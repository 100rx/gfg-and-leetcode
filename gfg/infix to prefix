class Solution:
    def infixToPrefix(self, infix):
        # Function to check precedence of operators
        def precedence(op):
            if op == '^': return 3
            if op in ('*', '/'): return 2
            if op in ('+', '-'): return 1
            return 0

        # Function to check if character is an operator
        def is_operator(c):
            return c in "+-*/^"

        # Step 1: Reverse the infix and swap parentheses
        infix = infix[::-1]
        infix = ''.join(['(' if ch == ')' else ')' if ch == '(' else ch for ch in infix])

        # Step 2: Convert to postfix
        stack = []
        postfix = []
        for char in infix:
            if char.isalnum():  # Operand
                postfix.append(char)
            elif char == '(':
                stack.append(char)
            elif char == ')':
                while stack and stack[-1] != '(':
                    postfix.append(stack.pop())
                stack.pop()  # Remove '('
            elif is_operator(char):  # Operator
                while stack and precedence(stack[-1]) >= precedence(char):
                    postfix.append(stack.pop())
                stack.append(char)

        while stack:
            postfix.append(stack.pop())

        # Step 3: Reverse postfix to get prefix
        return ''.join(postfix[::-1])
